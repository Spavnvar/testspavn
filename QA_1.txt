Порядок выполнения лабораторной работы #1

1. Зарегистрироваться на Github и прислать мне свой логин, чтобы я мог добавить вас в репозиторий. 

2. Склонировать репозиторий, соответствующий вашему потоку, список репозиториев вот тут: https://github.com/yakov-eremin

3. Разбиться на пары для выполнения работы. 

4. Выбрать какой-нибудь из ваших прошлых курсовых проектов, в котором есть графический интерфейс с достаточно большим набором контролов. Если в проекте всего пять виджетов и один пользовательский сценарий — этого недостаточно. В папке с проектом должна быть инструкция, как его собирать и запускать. 

5. Первый человек из пары создает новую ветку в git с названием, содержащим фамилии, например ivanov_petrov, и заливает туда папку со своим проектом. 

6. Второй человек из пары переключается на эту же ветку, и заливает папку со своим проектом. 

7. Запустить проект своего напарника, сделать скриншоты, написать спецификацию в виде сценариев использования (стр. 23-26). Спецификацию пишем не по фактической работе программы, а по тому, как она должна работать, по-вашему мнению. Как будто у вас есть только макет интерфейса и описание требуемого функционала.  

8. Создать спецификацию в виде Use Case UML диаграмм (стр. 27-29 и https://habr.com/ru/post/566218/). Делать можно в любом редакторе, например https://online.visual-paradigm.com/diagrams/solutions/free-use-case-diagram-tool/

9. Залить в репозиторий папку с созданными файлами, внутрь каталога напарника, чтобы в итоге получилась примерно такая структура:

IVT9X
│ ├── Brin
│ │ ├── Code
│ │ │ ├── main.cpp
│ │ │ └── README.txt
│ │ └── Specification
│ │     ├── auth_case_screenshot_1.jpg
│ │     ├── auth_case.txt
│ │     └── auth_case.uml // or .jpg
│ ├── LICENSE
│ └── README.md

Это не жесткое требование к структуре, можно сделать спецификацию в едином документе (по сути это всё равно нужно для отчета), можно разбить на подпапки и т.д. Главное — содержание, а не форма. 

10. Сделать отчет о проделанной работе и залить на ИЛИАС. 